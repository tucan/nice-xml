// Generated by CoffeeScript 1.6.3
var Serializer, Writer;

Writer = require('./writer');

Serializer = (function() {
  function Serializer(replacer, space) {
    this._buffer = null;
  }

  Serializer.prototype._processObject = function(data) {
    var key, value;
    for (key in data) {
      value = data[key];
      if (key !== '$') {
        this._processAny(key, value);
      }
    }
    return this;
  };

  Serializer.prototype._processAttrObject = function(data) {
    var key, value;
    for (key in data) {
      value = data[key];
      this._writer.pushAttribute(key, value);
    }
    return this;
  };

  Serializer.prototype._processArray = function(key, data) {
    var value, _i, _len;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      value = data[_i];
      this._processAny(key, value);
    }
    return this;
  };

  Serializer.prototype._processRegular = function(key, value) {
    if (value === null || typeof value !== 'object') {
      this._writer.pushElement(key, value);
    } else {
      this._writer.startElement(key);
      this._processAttrObject(value.$);
      this._processObject(value);
      this._writer.endElement(key);
    }
    return this;
  };

  Serializer.prototype._processSpecial = function(key, value) {
    switch (key) {
      case '$text':
        this._writer.pushText(value);
        break;
      case '$section':
        this._writer.pushSection(value);
        break;
      case '$comment':
        this._writer.pushComment(value);
        break;
      default:
        throw new Error('Unknown special key: ' + key);
    }
    return this;
  };

  Serializer.prototype._processNonArray = function(key, value) {
    if (value !== null && typeof value === 'object') {
      value = value.valueOf();
    }
    if (key[0] !== '$') {
      this._processRegular(key, value);
    } else {
      this._processSpecial(key, value);
    }
    return this;
  };

  Serializer.prototype._processAny = function(key, value) {
    if (value === void 0 || typeof value === 'function') {
      return;
    }
    if (Array.isArray(value)) {
      this._processArray(key, value);
    } else {
      this._processNonArray(key, value);
    }
    return this;
  };

  Serializer.prototype.process = function(data) {
    this._writer = new Writer();
    this._processObject(data);
    return this._writer.result();
  };

  return Serializer;

})();

module.exports = Serializer;
