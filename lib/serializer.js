// Generated by CoffeeScript 1.6.3
var Serializer;

Serializer = (function() {
  function Serializer(replacer, space) {
    this._buffer = null;
  }

  Serializer.prototype._processObject = function(data) {
    var key, value;
    for (key in data) {
      value = data[key];
      if (key !== '$') {
        this._processAny(key, value);
      }
    }
    return this;
  };

  Serializer.prototype._processArray = function(key, data) {
    var value, _i, _len;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      value = data[_i];
      this._processAny(key, value);
    }
    return this;
  };

  Serializer.prototype._processNonArray = function(key, value) {
    var attrKey, attrValue1, _ref;
    if (value !== null && typeof value === 'object') {
      value = value.valueOf();
    }
    if (key[0] !== '$') {
      if (value === null) {
        this._buffer.push('<', key, '/>');
      } else if (typeof value !== 'object') {
        this._buffer.push('<', key, '>', value, '</', key, '>');
      } else {
        this._buffer.push('<', key);
        _ref = value.$;
        for (attrKey in _ref) {
          attrValue1 = _ref[attrKey];
          this._buffer.push(' ', attrKey, '="', attrValue, '"');
        }
        this._buffer.push('>');
        this._processObject(value);
        this._buffer.push('</', key, '>');
      }
    } else {
      switch (key) {
        case '$text':
          this._buffer.push(value);
          break;
        case '$section':
          this._buffer.push('<![CDATA[', value, ']]>');
          break;
        case '$comment':
          this._buffer.push('<!--', value, '-->');
          break;
        default:
          throw new Error('Unknown special key: ' + key);
      }
    }
    return this;
  };

  Serializer.prototype._processAny = function(key, value) {
    if (value === void 0 || typeof value === 'function') {
      return;
    }
    if (Array.isArray(value)) {
      this._processArray(key, value);
    } else {
      this._processNonArray(key, value);
    }
    return this;
  };

  Serializer.prototype.process = function(data) {
    this._buffer = [];
    this._processObject(data);
    return this._buffer.join('');
  };

  return Serializer;

})();

module.exports = Serializer;
